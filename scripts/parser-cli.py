import argparse
import os
import logging
import sys

from datetime import datetime
from rd_parser.error import ErrorCode
from rd_parser.key_seqv_parser import KeySeqvParser


HEADER_CONTENT = \
"""/**
 * @brief Defines key sequence for Linux systems.
 *
 * This particular set of key sequence was generated by rd_parser module.
 *
 * This source code serves as submission to my bachelor thesis topic
 * "Implement Rubber Duckies on Available USB Devices and Make a Practical Test"
 * at FIT, BUT 2022/23.
 *
 * @author Hung Do
 * @date {}
 */
#include "key_seqv.h"

/// List of key sequences for (my) Linux system
struct key_seqv_t key_seqvs[] = {{
    INITIAL_DELAY,
""".format(datetime.strftime(datetime.today(), '%d/%m/%Y'))

FOOTER_CONTENT = \
"""};
"""


def process_args() -> tuple[str|None, str|None, bool]:
    """Process arguments.

    Returns:
        tuple[str|None, str|None, bool]: Filename of input, output file and verbose flag,
                                         respectively when defined.
    """
    parser = argparse.ArgumentParser('RubberDucky script parser')
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('-i', '--input', action='store', metavar='filename',
                        nargs=1, help='Source RubberDucky script file.')
    parser.add_argument('-o', '--output', action='store', metavar='filename',
                        nargs=1, help='Generated output filename.')
    parser.add_argument('-l', '--log_file', action='store', metavar='filename',
                        nargs=1, help='Log filename. Defaults to STDERR.')
    args = parser.parse_args()
    in_file, out_file = None, None

    # check received arguments
    if args.input is not None:
        if not os.path.exists(args.input[0]):
            sys.stderr.write(f'File {args.input[0]} does not exists\n')
            sys.exit(ErrorCode.INPUT_FILE_NOT_FOUND)
        in_file = args.input[0]

    out_file = args.output[0] if args.output is not None else None

    # init logging
    if args.verbose:
        if args.log_file:
            logging.basicConfig(filename=args.log_file[0],
                                filemode='w',
                                format='%(levelname)s :: %(message)s',
                                level=logging.DEBUG)
        else:
            logging.basicConfig(stream=sys.stderr,
                                filemode='w',
                                format='%(levelname)s :: %(message)s',
                                level=logging.DEBUG)

    return in_file, out_file, args.verbose


def main():
    # process arguments
    in_filename, out_filename, verbose = process_args()
    in_f = open(in_filename, 'r') if in_filename else sys.stdin
    out_f = open(out_filename, 'w') if out_filename else sys.stdout

    ksp = KeySeqvParser(verbose)

    with in_f as f:
        for i, line in enumerate(f):
            ksp.parse_line(line, i)
    ksp.set_last()

    with out_f as f:
        f.write(HEADER_CONTENT)
        for ks in ksp.lof_keyseqvs:
            f.write(str(ks))
        f.write(FOOTER_CONTENT)

if __name__ == '__main__':
    main()
