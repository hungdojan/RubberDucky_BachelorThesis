import logging
import re
import sys
from io import TextIOWrapper
from typing import Any, TextIO

from .key_seqv import KeySeqv
from .regex_groups import Groups, KEY_SEQV_REGEX, LINE_REGEX
from .mappings import *


HEADER_CONTENT = \
"""/**
 * @brief Defines key sequence for Linux systems.
 *
 * This particular set of key sequence was generated by rd_parser module.
 *
 * This source code serves as submission to my bachelor thesis topic
 * "Implement Rubber Duckies on Available USB Devices and Make a Practical Test"
 * at FIT, BUT 2022/23.
 *
 * @author Hung Do
 * @date 21/12/2022
 */
#include "key_seqv.h"

/// List of key sequences for (my) Linux system
struct key_seqv_t key_seqvs[] = {
    INITIAL_DELAY,
"""

FOOTER_CONTENT = \
"""    LAST_ITEM,
};
"""

class KeySeqvParser:

    def __init__(self, in_file: TextIO|TextIOWrapper=sys.stdin,
                 out_file: TextIO|TextIOWrapper=sys.stdout):
        self._in_file = in_file
        self._out_file = out_file
        self._lof_keyseqvs: list[KeySeqv] = []
        self.__new_sequence_structure()
        self._compile_patterns()


    @property
    def lof_keyseqvs(self) -> tuple:
        """Returns set of key sequences."""
        return tuple(self._lof_keyseqvs)


    def _compile_patterns(self):
        self._line_regex = re.compile(LINE_REGEX)
        self._key_seqv_regex = re.compile(KEY_SEQV_REGEX)


    def clear_lof_keyseqvs(self):
        """Clear the set of key sequences."""
        self._lof_keyseqvs.clear()


    def set_out_file(self, new_out_file: TextIO|TextIOWrapper):
        if new_out_file:
            self._out_file = new_out_file


    def set_in_file(self, new_in_file: TextIO|TextIOWrapper):
        if new_in_file:
            self._in_file = new_in_file



    def __new_sequence_structure(self):
        """Create a new structure for the keys."""
        self.__ks_struct = {
            'delay': 0,
            'modifiers': [],
            'keys': []
        }

    def parse_line(self, line: str):

        def _check_special_keys(value: str):
            # TODO:
            pass


        def _check_normal_keys(value: str):
            # check if symbol requires shift modifier
            if value in shift_mapping or value.isupper():
                # new sequence
                if not self.__ks_struct['keys']:
                    self.__ks_struct['modifiers'].append(Modifier.LSHIFT)
                # shift is not toggled yet push the key sequence first
                elif Modifier.LSHIFT not in self.__ks_struct['modifiers'] and \
                     Modifier.RSHIFT not in self.__ks_struct['modifiers']:
                    self._lof_keyseqvs.append(KeySeqv(**self.__ks_struct))
                    self.__new_sequence_structure()
                    self.__ks_struct['modifiers'].append(Modifier.LSHIFT)
                if value in shift_mapping:
                    self.__ks_struct['keys'].append(normal_mapping[shift_mapping[value]])
                else:
                    self.__ks_struct['keys'].append(normal_mapping[value.lower()])

            else:
                # if shift is toggled push the key sequence first
                if Modifier.LSHIFT in self.__ks_struct['modifiers'] or \
                   Modifier.RSHIFT in self.__ks_struct['modifiers']:
                    self._lof_keyseqvs.append(KeySeqv(**self.__ks_struct))
                    self.__new_sequence_structure()
                self.__ks_struct['keys'].append(normal_mapping[value])


        self.__new_sequence_structure()
        matches = self._key_seqv_regex.findall(line)

        for match in matches:
            # load delay
            if match[Groups.DELAY_ORIGINAL.value]:
                # finish previous sequence and add delay to the new one
                if self.__ks_struct['keys'] or self.__ks_struct['delay']:
                    self._lof_keyseqvs.append(KeySeqv(**self.__ks_struct))
                    self.__new_sequence_structure()
                self.__ks_struct['delay'] = int(match[Groups.DELAY_VALUE.value])

            # load special
            elif match[Groups.SPECIAL_ORIGINAL.value]:
                # TODO: modifiers/special
                pass
            # load normal keys
            else:
                value: str = match[Groups.NORMAL_KEYS.value]
                _check_normal_keys(value)

                # max 6 keys pressed are allowed to be sent at the same time
                if len(self.__ks_struct['keys']) > 5:
                    self._lof_keyseqvs.append(KeySeqv(**self.__ks_struct))
                    self.__new_sequence_structure()

        # finish last item pending (if exists)
        if self.__ks_struct['keys']:
            self._lof_keyseqvs.append(KeySeqv(**self.__ks_struct))
        # set last item as last item
        if self._lof_keyseqvs:
            last_item = self._lof_keyseqvs[-1]
            last_item.last = True


    def parse_content(self):
        """Parse the input file."""

        for i, line in enumerate(self._in_file):
            # line check
            if not self._line_regex.match(line):
                logging.warn(f'Unexpected character in line {i+1}')
                continue

            # parsing
            self.parse_line(line)


    def generate_output_file(self):
        # generate header
        self._out_file.write(HEADER_CONTENT)
        # generate content
        for ks in self._lof_keyseqvs:
            self._out_file.write(str(ks))
        # generate footer
        self._out_file.write(FOOTER_CONTENT)
